import getpass
import datetime
import inspect
import os
import itertools
import re
from Bio.Seq import Seq

filename = inspect.getframeinfo(inspect.currentframe()).filename
path = os.path.dirname(os.path.abspath(filename))
samtools = config['samtools']

user = getpass.getuser()
date = datetime.datetime.now()
date = '%i%0.2i%0.2i' % (date.year, date.month, date.day)
prefix = ''.join((user[0], user[2], date))
# OUTDIR = ''.join((user[0], user[2], date, '_', config["dir_suffix"]))
OUTDIR = config['outdir']
INDIR = config['indir']

name_list = [key.replace('_fwd','') for key in config['input_file'].keys()
             if key.endswith('fwd')]

rule all:
    input:
        '%s/report/%s_tagmap_downsample.html' % (OUTDIR, prefix)


rule report:
    input:
        downsample= expand('{{outdir}}/insertions/{name}_{num}_{len}.txt',
                           name=name_list, num=config['num_reads'],
                           len=config['read_length']),
        ref = expand('{refdir}/insertions/{name}.txt', indir=config['refdir'],
                     name=name_list)
    output:
        '{outdir}/report/{prefix}_tagmap_downsample.html'
    params:
        name_list = name_list,
        num_reads=config['num_reads'],
        read_length=config['read_length'],
        rmd='%s/tagmap_downsample.Rmd' % (path)
    script:
        "knit_report.R"



rule index_fasta:
    input:
        '%s/fasta/{name}.fa' % (OUTDIR)
    output:
        '%s/fasta/{name}.1.bt2' % (OUTDIR)
    params:
        '%s/fasta/{name}' % (OUTDIR)
    shell:
        "bowtie2-build -f {input} {params}"

rule combine_fasta:
    input:
        expand('%s/insertions/{{name}}_{species}.fa' % (OUTDIR),
               species=config['genomes'].keys())
    output:
        '%s/fasta/{name}.fa' % (OUTDIR)
    shell:
        "cat {input} > {output}"

rule extract_intersections:
    input:
        bed='%s/insertions/{name}.bed' % (OUTDIR),
        fasta=lambda wildcards: config['genomes'][wildcards.species]
    output:
        '%s/insertions/{name}_{species}.fa' % (OUTDIR)
    params:
        '{species}'
    shell:
        "if grep '{params}' {input.bed}; then "
        "grep '{params}' {input.bed} | bedtools getfasta -name -fi {input.fasta} "
        "-bed /dev/stdin -fo {output}; else touch {output}; fi"

rule insertions_bed:
    input:
        '%s/insertions/{name}.txt' % (OUTDIR)
    output:
        '%s/insertions/{name}.bed' % (OUTDIR)
    shell:
        "{path}/bed_insertions.awk {input} > {output}"

rule call_insertions:
    input:
        regions='%s/regions/{name}_combined_{num}_{len}.txt' % (OUTDIR),
        fwd='%s/sorted/{name}_fwd_{num}_{len}.bam' % (OUTDIR),
        rev='%s/sorted/{name}_rev_{num}_{len}.bam' % (OUTDIR)
    output:
        '%s/insertions/{name}_{num}_{len}.txt' % (OUTDIR)
    params:
        samtools=samtools,
        genomes=config['genomes']
    script:
        "call_insertions.py"



rule call_regions:
    input:
        '%s/regions/{name}_fwd_{num}_{len}.bed' % (OUTDIR),
        '%s/regions/{name}_rev_{num}_{len}.bed' % (OUTDIR)
    output:
        '%s/regions/{name}_combined_{num}_{len}.txt' % (OUTDIR)
    params:
        max_gap= config['max_gap']
    shell:
        "{path}/call_regions.sh {input[0]} {input[1]} {params.max_gap} > {output}"


rule depth:
    input:
        bed='%s/combined/{name}_{num}_{len}.bed' % (OUTDIR),
        genome=config['chrom_sizes']
    output:
        '%s/regions/{name}_{num}_{len}.bed' % (OUTDIR)
    shell:
        "bedtools genomecov -bg -i {input.bed} -g {input.genome} | "
        "{path}/combine_depth.awk > {output}"

rule sort_and_index:
    input:
        '%s/combined/{name}_{num}_{len}.bam' % (OUTDIR)
    output:
        '%s/sorted/{name}_{num}_{len}.bam' % (OUTDIR),
        '%s/sorted/{name}_{num}_{len}.bam.bai' % (OUTDIR)
    threads: 10
    shell:
        "{samtools} sort -@ {threads} {input} > {output[0]}; "
        "{samtools} index {output[0]}"


rule bamToBed:
    input:
        '%s/combined/{name}_{num}_{len}.bam' % (OUTDIR)
    output:
        '%s/combined/{name}_{num}_{len}.bed' % (OUTDIR)
    params:
        max_dist = config['max_pair_dist']
    log:
        '%s/combined/{name}.log' % (OUTDIR)
    shell:
        "bamToBed -bedpe -i {input} | {path}/combine_pairs.awk "
        "-v max_dist={params.max_dist} 2> {log} | "
        "bedtools sort -i /dev/stdin > {output}"


rule combine:
    input:
        bam=expand('%s/mapped/{{name}}_{species}_{{num}}_{{len}}.bam' % (OUTDIR), species=config['bowtie_index'].keys())
    output:
        '%s/combined/{name}_{num}_{len}.bam' % (OUTDIR)
    script:
        'combine_bam.py'




rule map_reads:
    input:
        '%s/parsed/{name}_{num}_{len}.1.fastq.gz' % OUTDIR,
        '%s/parsed/{name}_{num}_{len}.2.fastq.gz' % OUTDIR
    params:
        mapper = config["mapper"],
        index=lambda wildcards: config['bowtie_index'][wildcards.species]
    threads: 10
    log: "%s/mapped/{name}_{species}_{num}_{len}.mapping.log" % (OUTDIR)
    output:
        "%s/mapped/{name}_{species}_{num}_{len}.bam" % (OUTDIR)
    shell:
        "({params.mapper} -p {threads} --very-sensitive "
        "-x {params.index} --reorder -1 <(gunzip -c {input[1]}) "
        "-2 <(gunzip -c {input[0]})) 2> {log} | {samtools} view -Sb - > {output}"

def compute_length(wildcards, len_dict):
    const = len_dict[int(wildcards.pair)][wildcards.ori]
    return(int(wildcards.len)-const)

rule downsample:
    input:
        '%s/parsed/{name}_{ori}.{pair}.fastq.gz' % INDIR
    output:
        '{outdir}/parsed/{name}_{ori}_{num}_{len}.{pair}.fastq.gz'
    params:
        num='{num}',
        length=lambda wildcards: compute_length(wildcards, config['const_len'])
    shell:
        "gunzip -c {input} | "
        "{path}/downsample.awk -vnum={params.num} -vlen={params.length} | "
        " gzip -c > {output}"


# rule parse_reads:
#     input:
#         lambda wildcards: config['input_file'][wildcards.name][0],
#     output:
#         '%s/parsed/{name}.statistics.txt' % (OUTDIR),
#         '%s/parsed/{name}.1.fastq.gz' % OUTDIR,
#         '%s/parsed/{name}.2.fastq.gz' % OUTDIR,
#         structure = '%s/parsed/{name}.structure.txt' % (OUTDIR)
#     log:
#         '%s/parsed/{name}_parser.log' % (OUTDIR)
#     params:
#         structure= config['structure'],
#         outdir = '%s/parsed/' % OUTDIR,
#         name= '{name}',
#         input_dict = config['input_file'],
#         primer_dict = config['primer']
#     run:
#         p_type=params.input_dict[wildcards.name][1]
#         primer = params.primer_dict[p_type]
#         primer_rev = str(Seq(primer).reverse_complement())
#         structure = params.structure % (primer_rev, primer)
#         with open(output.structure[0], 'w') as f:
#             f.write(structure)
#         shell('~t.v.schaik/modules/read-parsing/read_parser.py -r -M 50 -a -l {log} -p {input[1]} '
#               '-b {wildcards.name} {input[0]} {output.structure} {params.outdir}')
