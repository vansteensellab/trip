import getpass
import datetime
import inspect
import os
import re

filename = inspect.getframeinfo(inspect.currentframe()).filename
path = os.path.dirname(os.path.abspath(filename))

# user = getpass.getuser()
# date = datetime.datetime.now()
# date = '%i%0.2i%0.2i' % (date.year, date.month, date.day)


rule all:
    input:
        expand('{outdir}/mutation_counts/{name}.{map}_count.table', outdir=config['out_dir'],
               name=config['input_file']['mutation'].keys(),
               map=['unmapped', 'mapped']),
        expand('{outdir}/counts/gDNA.{name}.raw.count', outdir=config['out_dir'],
               name=config['input_file']['gDNA'].keys()),
        expand('{outdir}/table/mapping.{name}.{num}.table', outdir=config['out_dir'],
               name=config['input_file']['mapping'].keys(), num=(1,2))

rule gdna_only:
    input:
        expand('{outdir}/counts/gDNA.{name}.raw.count', outdir=config['out_dir'],
               name=config['input_file']['gDNA'].keys()),

rule mutation_only:
    input:
        expand('{outdir}/mutation/{name}.raw.table', outdir=config['out_dir'],
               name=config['input_file']['mutation'].keys())

rule mapping_only:
    input:
        expand('{outdir}/mutation_counts/mapping.{name}.{num}.table', outdir=config['out_dir'],
               name=config['input_file']['mapping'].keys(), num=(1,2))

rule count_mutation:
    input:
        '{outdir}/mutation/{name}.genuine_{map}.table'
    output:
        '{outdir}/mutation_counts/{name}.{map}_count.table'
    shell:
        "sort {input} | uniq -c | awk -vOFS='\t' '{{print $1, $2, $3, $4}}' > {output}"

rule genuine_mutations:
    input:
        '%s/mutation/{name}.raw.table' % config['out_dir'],
        '%s/counts/mutation.{name}.starcode.count' % config['out_dir'],
        lambda wildcards: '%s/table/mapping.%s.2.table' % (config['out_dir'], config['input_file']['mutation'][wildcards.name][2])
    output:
        '%s/mutation/{name}.not_genuine.table' % config['out_dir'],
        '%s/mutation/{name}.genuine_mapped.table' % config['out_dir'],
        '%s/mutation/{name}.genuine_unmapped.table' % config['out_dir']
    script:
        'scripts/genuine_mutations.py'


rule call_mutation:
    input:
        '%s/parsed/mutation.{name}.barcode.txt.gz' % config['out_dir']
    output:
        '%s/mutation/{name}.raw.table' % config['out_dir']
    params:
        target = config['crispr_target'],
        spacer_list = config['spacer_list'],
        gap_list = config['gap_list']
    script:
        'scripts/call_mutation.py'


rule parse_sam:
    input:
        bam='{outdir}/aligned/{name}.{num}.bam',
        count='{outdir}/counts/mapping.{name}.starcode.count',
    output:
        bed='{outdir}/bed/mapping.{name}.{num}.bed',
        table='{outdir}/table/mapping.{name}.{num}.table',
        stats='{outdir}/stats/mapping.{name}.{num}.parse_stat.table',
        length='{outdir}/stats/mapping.{name}.{num}.length.table',
        remap_fq='{outdir}/aligned/mapping.{name}.{num}.remap.fastq.gz',
        remap='{outdir}/aligned/mapping.{name}.{num}.remap.bam'
    wildcard_constraints:
        num="\d+"
    params:
        bowtie_index = config['bowtie']['index'],
        options=config['bowtie']['options'],
        max_dist = lambda wildcards: config['max_dist'][wildcards.num],
        num='{num}'
    threads: 10
    script:
        'scripts/parse_sam.py'


if 'mapping' in config['input_file']:
    rule align:
        input:
            '{outdir}/parsed/mapping.{name}.{num}.fastq.gz'
        output:
            '{outdir}/aligned/{name}.{num}.bam'
        params:
            bowtie_index=config['bowtie']['index'],
            options=config['bowtie']['options'],
            num='{num}'
        wildcard_constraints:
            num="\d+"
        threads: 10
        log:
            '{outdir}/mapping.align.{name}.{num}.log'
        run:
            options = params.options[params.num]
            shell("{path}/scripts/align.sh {input} {log} {threads} "
                  "{options} {params.bowtie_index} {output}")



rule starcode:
    input:
        '%s/counts/{read_type}.{name}.raw.count' % config['out_dir']
    output:
        gen='%s/counts/{read_type}.{name}.starcode.count' % config['out_dir'],
        mut='%s/counts/{read_type}.{name}.genuine.cut' % config['out_dir'],
        count='%s/counts/{read_type}.{name}.count.cut' % config['out_dir']
    params:
        lev_dist = config['lev_dist'],
        use_other = False,
        read_type = '{read_type}',
        count= lambda wildcards: config['min_count'][wildcards.read_type]
    threads:
        3
    script:
        'scripts/starcode.py'

rule count_barcode:
    input:
        '%s/parsed/{file_base}.{name}.barcode.txt.gz' % config['out_dir']
    output:
        '%s/counts/{file_base}.{name}.raw.count' % config['out_dir']
    params:
        path=path
    shell:
        "{params.path}/scripts/count_barcode.sh {input} > {output}"

ruleorder: parse_mapping > parse_mutation

rule parse_mutation:
    input:
        lambda wildcards: config['input_file'][wildcards.type][wildcards.name][0]
    output:
        '{outdir}/parsed/{type}.{name}.barcode.txt.gz',
        '{outdir}/parsed/{type}.{name}.statistics.txt',
        structure = '{outdir}/parsed/{type}.{name}.structure.txt'
    log:
        '{outdir}/stats/{type}.{name}_parser.log'
    params:
        structure= config['structure'],
        type_dict= config['input_file'],
        outdir = '{outdir}/parsed/'
    run:
        structure = params.structure[wildcards.type]
        idx_len = params.type_dict[wildcards.type][wildcards.name][1]
        structure = structure % idx_len
        if idx_len == 0:
            structure = re.sub('index.*\n', '', structure)
        with open(output.structure, 'w') as f:
            f.write(structure)
        shell('~t.v.schaik/mydata/modules/read-parsing/read_parser.py -r -s -l {log} '
              '-b {wildcards.type}.{wildcards.name} {input} {output.structure} '
              '{params.outdir}')


rule parse_mapping:
    input:
        lambda wildcards: config['input_file']['mapping'][wildcards.name][0]
    output:
        '%s/parsed/mapping.{name}.barcode.txt.gz' % (config['out_dir']),
        '%s/parsed/mapping.{name}.1.fastq.gz' % (config['out_dir']),
        '%s/parsed/mapping.{name}.2.fastq.gz' % (config['out_dir']),
        '%s/parsed/mapping.{name}.statistics.txt' % (config['out_dir']),
        structure = '%s/parsed/mapping.{name}.structure.txt' % (config['out_dir'])
    log:
        '%s/parsed/mapping.{name}_parser.log' % (config['out_dir'])
    params:
        structure= config['structure']['mapping'],
        type_dict= config['input_file']['mapping'],
        outdir = '%s/parsed/' % config['out_dir'],
        name= '{name}'
    run:
        structure = params.structure % params.type_dict[wildcards.name][1]
        structure = structure.replace('\\', '')
        if params.type_dict[wildcards.name][1] == 0:
            structure = re.sub('index.*\n', '', structure)
        with open(output.structure, 'w') as f:
            f.write(structure)
        shell('~t.v.schaik/mydata/modules/read-parsing/read_parser.py -r -a -l {log} -p {input[1]} '
              '-b mapping.{wildcards.name} {input[0]} {output.structure} {params.outdir}')
